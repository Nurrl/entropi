#!/bin/bash

distroImage=https://downloads.raspberrypi.org/raspbian_lite_latest
bootMount=/mnt/image/boot
rootMount=/mnt/image/root

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

# Ask user to download if there is no image..
if [ -z "$(ls -1 images/*.img 2>/dev/null)" ]
then
  echo -e "No image found in 'images/' dir.\n"
  read -p "Download image from downloads.raspberrypi.org [Yy/Nn]? " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]
  then
    echo "Ok exiting, download image yourself and put it in 'images/' dir."
    exit 1
  fi

  echo "Image download.."

  #Â Making tmp dir for download
  echo -n "  -> Making dir.. "
  mkdir -p /tmp
  echo "Ok."

  # Getting image
  echo "  -> Downloading.. "
  wget $distroImage -O /tmp/raspbian.zip -q --show-progress
  echo "Ok."

  # Unziping
  echo -n "  -> Unziping.. "
  unzip -uo /tmp/raspbian.zip -d images/ > /dev/null
  echo "Ok."

  echo -n "  -> Cleaning.. "
  rm -f /tmp/raspbian.zip
  echo -e "Ok\n"
fi

imageList=$(ls images/*.img 2>/dev/null)
imageCount=$(ls -1 images/*.img 2>/dev/null | wc -l)
selectedFile=''

echo "Searching for image.. "
if [ $imageCount -gt 1 ]
then
  echo "Found $imageCount"
  echo -e "Please select an image:\n"
  PS3="Type a number or 'q' to quit: "

  select fileName in $imageList
  do
    if [ -n "$fileName" ]
    then
      selectedFile=$fileName
    fi
    break
  done
  if [ "$selectedFile" == '' ]
  then
    exit 1
  fi
else
  echo "Found 1"
  selectedFile=$imageList
fi

echo "Using: $selectedFile"

function mountImage() {
  echo -n "  -> Making dirs.. "
  # Make dirs
  mkdir -p $bootMount
  mkdir -p $rootMount
  echo "Ok"

  # Get sector offsets
  echo -n "  -> Getting img spec.. "
  bootOffset=$(($(fdisk -l -o start $selectedFile | sed '1,/Start/d' | tr -d ' ' | sed -n '1p')*512))
  rootOffset=$(($(fdisk -l -o start $selectedFile | sed '1,/Start/d' | tr -d ' ' | sed -n '2p')*512))
  echo "Ok"

  # Mount
  echo -n "  -> Mounting /boot to $bootMount.. "
  mount -v -o offset=$bootOffset -t vfat $selectedFile $bootMount > /dev/null
  echo "Ok"
  echo -n "  -> Mounting / to $rootMount.. "
  mount -v -o offset=$rootOffset -t ext4 $selectedFile $rootMount > /dev/null
  echo -e "Ok\n"
}
function umountImage() {
  # Umount all system thing
  echo -n "  -> Umounting image.. "
  umount $bootMount
  umount -lf $rootMount
  echo "Done"
}

function doChroot() {
  # Mount all system stuff
  echo -n "  -> System mount.. "
  mount --bind /dev $rootMount/dev
  mount --bind /dev/pts $rootMount/dev/pts
  mount -t proc /proc $rootMount/proc
  mount -t sysfs /sys $rootMount/sys
  echo "Ok"

  # File requierements
  echo -n "  -> Chroot file workaround.. "
  cp /etc/resolv.conf $rootMount/etc/resolv.conf
  cp /usr/bin/qemu-arm-static $rootMount/usr/bin/
  mv $rootMount/etc/ld.so.preload $rootMount/etc/ld.so.preload.bak
  echo "Ok"
}
function doneChroot() {
  # Remove unused chroot files
  echo -n "  -> Removing workaround files.. "
  rm $rootMount/etc/resolv.conf
  rm $rootMount/usr/bin/qemu-arm-static
  mv $rootMount/etc/ld.so.preload.bak $rootMount/etc/ld.so.preload
  echo "Ok"

  echo -n "  -> Umounting chroot devices.. "
  umount $rootMount/dev/pts
  umount $rootMount/dev
  umount $rootMount/proc
  umount $rootMount/sys
  echo "Ok"
}

function moduleScript() {
  moduleList=$(ls -1 modules/*.load | sed 's/.load//')

  mkdir -p $rootMount/tmp/modules
  echo "#bin/sh" > $rootMount/tmp/modules.sh
  for modulePath in $moduleList
  do
    cp $modulePath $rootMount/tmp/modules
    echo "sh /tmp/$modulePath" >> $rootMount/tmp/modules.sh
  done

  echo "rm -rf /tmp/*" >> $rootMount/tmp/modules.sh
}

# Mounting image to $rootMount & $bootMount
mountImage
# Adding chroot files & mount chroot stuff
doChroot

echo -e "\nEverything ready for chroot !\n"

# Generating script
echo -n "Generating modulestart script.. "
moduleScript
echo "Done"

# Launch chroot
echo "  *** Starting modulestart script ***"
chroot $rootMount /bin/sh /tmp/modules.sh

# Remove chroot related files & umount chroot stuff
doneChroot
# Umount image
umountImage
